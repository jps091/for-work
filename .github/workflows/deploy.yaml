#name: Deploy To EC2
#on:
#  pull_request:
#    types: [opened, synchronize, closed]
#    branches: [dev]
#    paths:
#      - 'src/**'
#
#jobs:
#  test:
#    if: github.event.action == 'opened' || github.event.action == 'synchronize'
#    runs-on: ubuntu-latest
#    steps:
#      - name: Github Repository 파일 불러오기
#        uses: actions/checkout@v4
#
#      - name: JDK 17버전 설치
#        uses: actions/setup-java@v4
#        with:
#          distribution: temurin
#          java-version: 17
#
#      - name: application.yaml 파일 만들기
#        run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.yaml
#
#      - name: 테스트 진행
#        run: ./gradlew test
#
#  image-build:
#    if: github.event.pull_request.merged == true
#    runs-on: ubuntu-latest
#    steps:
#      - name: Github Repository 파일 불러오기
#        uses: actions/checkout@v4
#
#      - name: JDK 17버전 설치
#        uses: actions/setup-java@v4
#        with:
#          distribution: temurin
#          java-version: 17
#
#      - name: application.yaml 파일 만들기
#        run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.yaml
#
#      - name: 빌드 실행
#        run: ./gradlew clean build
#
#      - name: AWS Resource에 접근할 수 있게 AWS credentials 설정
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          aws-region: ap-northeast-2
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#
#      - name: ECR에 로그인하기
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v2
#
#      - name: 기존 컨테이너 삭제 하기
#        run: |
#          container_id=$(docker ps -q --filter ancestor=${{ steps.login-ecr.outputs.registry }}/for-work-server:latest)
#          if [ -n "$container_id" ]; then
#          docker stop $container_id
#          docker rm $container_id
#          fi
#
#      - name: 기존 이미지 삭제
#        run: docker rmi ${{ steps.login-ecr.outputs.registry }}/for-work-server:latest || true
#
#      - name: Docker 이미지 생성
#        run: docker build -t for-work-server .
#
#      - name: Docker 이미지에 Tag 붙이기
#        run: docker tag for-work-server ${{ steps.login-ecr.outputs.registry }}/for-work-server:latest
#
#      - name: ECR에 Docker 이미지 Push하기
#        run: docker push ${{ steps.login-ecr.outputs.registry }}/for-work-server:latest
#
#      - name: Rename AppSpec File
#        run: mv appspec.yaml appspec.yml
#
#      - name: 압축하기
#        run: tar -czvf $GITHUB_SHA.tar.gz appspec.yml scripts
#
#      - name: S3에 기존 압축파일 삭제하기
#        run: |
#          aws s3 rm s3://for-work-730335533510/ --region ap-northeast-2 --recursive --exclude "*" --include "*.tar.gz"
#
#      - name: S3에 프로젝트 업로드하기
#        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.tar.gz s3://for-work-730335533510/$GITHUB_SHA.tar.gz
#
#  deploy:
#    runs-on: ubuntu-latest
#    needs: [ image-build ]
#    steps:
#      - name: AWS Resource에 접근할 수 있게 AWS credentials 설정
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          aws-region: ap-northeast-2
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#
#      - name: Code Deploy를 활용해 EC2에 프로젝트 코드 배포
#        id: status
#        run: aws deploy create-deployment
#          --application-name for-work-server
#          --deployment-config-name CodeDeployDefault.AllAtOnce
#          --deployment-group-name Production
#          --s3-location bucket=for-work-730335533510,bundleType=tgz,key=$GITHUB_SHA.tar.gz
#
#      - name: SLACK 알람 보내기
#        if: always()
#        uses: slackapi/slack-github-action@v1.24.0
#        with:
#          payload: |
#            {
#              "text": "message",
#              "blocks": [
#                {
#                  "type": "section",
#                  "text": {
#                    "type": "mrkdwn",
#                    "text": "Environment : dev, Deploy Result : ${{ steps.status.outcome }}, Repository : ${{ github.repository }}."
#                  }
#                }
#              ]
#            }
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
#          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK